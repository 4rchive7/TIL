install.packages('foreign')
isstall.packages('readxl')
install.packages('readxl')
library(foreign)
source('~/.active-rstudio-document')
source('C:/rProject/day06/r1.R')
source('C:/rProject/day06/r1.R')
library(foreign)
library(dplyr)
library(ggplot2)
library(readxl)
raw_welfare <- read.spss(file = 'Koweps_hpc10_2015_beta1.sav',
to.data.frame = T)
welfare <- raw_welfare
welfare
source('C:/rProject/day06/r1.R')
raw_welfare <- read.spss(file = 'Koweps_hpc10_2015_beta1.sav',
to.data.frame = T)
View(welfare)
length(colnames(welfare))
welfare <- rename(welfare,
sex = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_reg7
)
table(welfare$sex)
qplot(welfare$sex)
welfare$sex <- ifelse(welfare$sex==1, 'male', 'female')
qplot(welfare$sex)
#page 213
#step1 전처리 - 1. 변수 검토하자
welfare
class(welfare$sex)
table(welfare$sex)
class(income)
welfare <- rename(welfare,
sex = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_reg7
)
class(welfare$income)
qplot()
qplot(welfare$income)
summary(welfare$income)
qplot(welfare$income)+xlim(0, 1000)
qplot(welfare$income)
#step2 전처리
summary(welfare$income)
welfare$income <- ifelse(welfare$income %in% c(0,9999), NA, welfare$income)
welfare$income <- ifelse(welfare$income %in% c(0,9999), NA, welfare$income)
welfare$income
table(is.na(welfare$income))
library(dplyr)
#step3 - 성별 월급 평균표 만들기
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income = mean(income))
sex_income
#step3 - 성별 월급 평균표 만들기
sex_income <- welfare %>%
filter(!is.na(income)) %>% #df
group_by(sex) %>%
summarise(mean_income = mean(income))
#step3 - 성별 월급 평균표 만들기
sex_income <- welfare %>%
filter(!is.na(income)) %>%  #NA제거
group_by(sex) %>%
summarise(mean_income = mean(income))
ggplot(data=sex_income, aes(x=sex_income))+geom_col()
ggplot(data=sex_income, aes(x=sex, y=mean_income))+geom_col()
#page220
class(welfare$birth)
summary(welfare$birth)
qplot(welfare$birth)
#전처리
summary(welfare$birth)
table(is.na(welfare$birth))
welfare$birth
#파생변수 만들기 -> 연도를 나이로 환산하는 변수 만들겠음
welfare$age <- 2015 - welfare$birth + 1
welfare$age
#파생변수 만들기 -> 연도를 나이로 환산하는 변수 만들겠음
welfare$age <- 2018 - welfare$birth + 1
welfare$age
summary(welfare$age)
qplot(welfare$age)
#------------------------------------------------------------
#나이와 월급의 관계 분석하기
age_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
age_income
head(age_income)
ggplot(data = age_income, aes(x= age,y=mean_income)) + geom_line()
#page 225 - 연령대에 따른 월급차이
#변수 검토 및 전처리
# age/ income 앞에서 이리 함
# 변수간 관계 => 파생변수 만들기
welfare <- welfare %>%
mutate(ageg = ifelse(age<30, "young",
ifelse(age <=59, "middle", "old")))
table(welfare$ageg)
#page 225 - 연령대에 따른 월급차이
#변수 검토 및 전처리
# age/ income 앞에서 이리 함
# 변수간 관계 => 파생변수 만들기
welfare <- welfare %>%
mutate(ageg = ifelse(age < 30, "young",
ifelse(age <=59, "middle", "old")))
table(welfare$ageg)
# 연령대에 따른 월급 차이 분석하기
ageg_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(ageg) %>%
summarise(mean_income = mean(income))
ageg_income
ggplot(data = ageg_income, aes(x=ageg, y=mean_income)) + geom_col()
# 나이순으로 그래프 다시 만들기
ggplot(data = ageg_income, aes(x=ageg, y=mean_income)) + geom_col()+ scale_x_discrete(limits = c("young", "middle", "old"))
#연령대 및 성별 월급 차이
# 변수 검토 및 전처리 -> 앞에서 함
# 연령대 및 성별 월급 평균표 만들기
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(ageg, sex) %>%
summarise(mean_income = mean(income))
sex_income
#연령대 및 성별 월급 차이
# 변수 검토 및 전처리 -> 앞에서 함
# 연령대 및 성별 월급 평균표 만들기
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(ageg, sex) %>% #이 부분 때문에 앞에서 만든 것들로 바로 실행이 가능
summarise(mean_income = mean(income))
sex_incom
sex_income
ggplot(data = sex_income, aes(x = ageg, y=mean_income, fill = sex)) + geom_col() + scale_x_discrete(limits = c("young", "middle", "old"))
ggplot(data = sex_income, aes(x = ageg, y=mean_income)) + geom_col() + scale_x_discrete(limits = c("young", "middle", "old"))
ggplot(data = sex_income, aes(x = ageg, y=mean_income, fill = sex)) + geom_col() + scale_x_discrete(limits = c("young", "middle", "old"))
ggplot(data=sex_income, aes(x=ageg, y=mean_income, fill = sex))+geom_col(position = "dodge") + scale_x_discrete(limits = c("young", "middle", "old"))
sex_age <- welfare %>%
filter(!is.na(income)) %>%
group_by(age, sex) %>%
summarise(mean_income = mean(income))
sex_age
ggplot(data=sex_age, aes(x=age,y=mean_income), col =sex) + geom_line()
ggplot(data=sex_age, aes(x=age,y=mean_income, col =sex) + geom_line()
ggplot(data=sex_age, aes(x=age,y=mean_income, col =sex)) + geom_line()
ggplot(data = sex_age, aes(x=age,y=mean_income, col =sex)) + geom_line()
#변수 검토하기
class(welfare$code_job)
table(welfare$code_job)
library(readxl)
list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2
)
list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
list_job
head(list_job)
dim(list_job)
welfare <- left_join(welfare, list_job, id="code_job")
welfare %>%
filter(!is.na(code_job)) %>%
select(code_job, job) %>%
head(10)
# 직업별 월급 차이 분석하기
job_income <- welfare %>%
filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income))
head(job_income)
top10 <- job_income %>%
arrange(desc(mean_income)) %>%
head(10)
top10
ggplot(data = top10, aes(x = reorder(job, mean_income), y=mean_income))+geom_col()+coord_flip()
bottom10 <- job_income %>%
arrange(mean_income) %>%
head(10)
ggplot(data = bottom10, aes(x = redorder(job, -mean_income), y = mean_income)) + geom_col() + coord_flip() + ylim(0, 850)
ggplot(data = bottom10, aes(x = reorder(job, -mean_income), y = mean_income)) + geom_col() + coord_flip() + ylim(0, 850)
#page240 성별 직업 빈도
# 성별 직업 빈도표 만들기
job_male <- welfare %>%
filter(!is.na(job) & sex == 'male') %>%
group_by(job) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
head(10)
job_male
job_female<-welfare%>%
filter(!is.na(job)&sex=='female')%>%
group_by(job)%>%
summarise(n=n())%>%
arrange(desc(n))%>%
head(10)
job_female
ggplot(data = job_male, aes(x=reorder(job, n), y=n))+geom_col()+coord_flip()
ggplot(data = job_female, aes(x=reorder(job, n), y=n))+geom_col()+coord_flip()
ggplot(data = job_male, aes(x=reorder(job, n), y=n))+geom_col()+coord_flip()
class(welfare$religion)
table(welfare$religion)
#전처리
welfare$religion <- ifelse(welfare$religion == 1, "yes", "no")
table(welfare$religion)
qplot(welfare$religion)
class(welfare$marriage)
table(welfare$marriage)
welfare$group_marriage <- ifelse(welfare$marriage == 1, "marriage"m
ifelse(welfare$marriage == 3, "divorce", NA))
welfare$group_marriage <- ifelse(welfare$marriage == 1, "marriage",
ifelse(welfare$marriage == 3, "divorce", NA))
table(welfare$group_marriage)
table(is.na(welfare$group_marriage))
qplot(welfare$group_marriage)
# 종교에 따른 이혼율 구하기
religion_marriage <- welfare %>%
filter(!is.na(group_marriage)) %>%
group_by(religion, group_marriage) %>%
summarise(n=n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100, 1))
religion_marriage
#위에 방법 또는 아래 방법도 가능
religion_marriage <- welfare%>%
filter(!is.na(group_marriage))%>%
count(religion, group_marriage)%>%
group_by(religion) %>%
mutate(pct = round(n/sum(n)*100, 1))
divorce <- religion_marriage %>%
filter(group_marriage == "divorce") %>%
select(religion, pct)
divorce
ggplot(data = divorce, aes(x =religion, y = pct)) + geom_col()
#연령대 및 종교 유무에 따른 이혼율 분석하기
ageg_marriage <- welfare %>%
filter(!is.na(group_marriage))%>%
group_by(ageg, group_marriage) %>%
summarise(n=n())%>%
mutate(tot_group = sum(n))%>%
mutate(pct = round(n/tot_group*100, 1))
ageg_marriage
# 아래의 방법으로도 가능하다
ageg_marriage <- welfare %>%
filter(!is.na(group_marriage))%>%
count(ageg, group_marriage) %>%
group_by(ageg)%>%
mutate(pct = round(n/tot_group*100, 1))
# 아래의 방법으로도 가능하다
ageg_marriage <- welfare %>%
filter(!is.na(group_marriage))%>%
count(ageg, group_marriage) %>%
group_by(ageg)%>%
mutate(pct = round(n/sum(n)*100, 1))
ageg_marriage
#연령대별 이혼율 그래프 만들기
ageg_divorce <- ageg_marriage %>%
filter(ageg != "young" & group_marriage == "divorce") %>%
select(ageg, pct)
ggplot(data = ageg_divorce, aes(x = ageg, y=pct)) + geom_col()
ageg_religion_marriage <- welfare %>%
fliter(!is.na(group_marriage) & ageg != "young")%>%
group_by(ageg, religion, group_marriage)%>%
summarise(n=n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100, 1))
ageg_religion_marriage <- welfare %>%
filter(!is.na(group_marriage) & ageg != "young")%>%
group_by(ageg, religion, group_marriage)%>%
summarise(n=n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100, 1))
df_divorce <- ageg_religion_marriage %>%
filter(group_marriage = "divorce") %>%
select(ageg, religion, pct)
df_divorce <- ageg_religion_marriage %>%
filter(group_marriage == "divorce") %>%
select(ageg, religion, pct)
ggplot(data=df_divorce, aes(x=ageg, y=pct, fill=religion)) + geom_col(position = "dodge")
class(welfare$code_region)
class(welfare$code_region)
table(welfare$code_region)
list_region <- data.frame(code_region = c(1:7),
region = c("서울",
"수도권(인천/경기)",
"부산/경남/울산"
"대구/경북",
"대전/충남",
"강원/충북",
"광주/전남/전북/제주도"))
list_region <- data.frame(code_region = c(1:7),
region = c("서울",
"수도권(인천/경기)",
"부산/경남/울산",
"대구/경북",
"대전/충남",
"강원/충북",
"광주/전남/전북/제주도"))
list_region
class <- c(1, 1, 2, 3)
class(class)
is.vector(class)
class <- c(2, 4 ,5, 4 )
class
class <- c(1, 1, 2, 3)
class <- c(1, 1, 2, 3)
class <- c(2, 4 ,5, 4 )
class
source('~/.active-rstudio-document', encoding = 'UTF-8')
g1
<- function(){
library(ggplot2)#아래 주소에 web\img로 넣으면 꿀잼
jpeg(filename = "c:\\rProject\\mychart2.jpg", width = 680, height = 680, quality = 100)
#아래부분에 함수에 대한 정보를 넣으면 된다.
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000)
library(ggplot2)#아래 주소에 web\img로 넣으면 꿀잼
jpeg(filename = "c:\\rProject\\mychart2.jpg", width = 680, height = 680, quality = 100)
#아래부분에 함수에 대한 정보를 넣으면 된다.
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000)
source('~/.active-rstudio-document', encoding = 'UTF-8')
g1
#------------------------그림 저장하는 법-------------------
library(ggplot2)
source('~/.active-rstudio-document', encoding = 'UTF-8')
g1
source('~/.active-rstudio-document', encoding = 'UTF-8')
g1
#------------------------그림 저장하는 법-------------------
midwest
source('~/.active-rstudio-document', encoding = 'UTF-8')
g1
#------------------------그림 저장하는 법-------------------
midwest
source('~/.active-rstudio-document', encoding = 'UTF-8')
g1
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
g1
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
g1
#------------------------그림 저장하는 법-------------------
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000)
g1
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000)
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g1
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000)
----------------------그림 저장하는 법-------------------
library(ggplot2)
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000)
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g1
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g1
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g1
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g1
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g1
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g1
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g2
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g2
library(ggplot2)
jpeg(filename = "c:\\rProject\\mychart4.jpg", width = 680, height = 680, quality = 100)
p = ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000
print(p);
library(ggplot2)
jpeg(filename = "c:\\rProject\\mychart4.jpg", width = 680, height = 680, quality = 100)
p = ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000)
print(p);
dev.off();
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g2
dev.off();
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g1
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g(1)
g1(1)
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g2(1)
g2(1)
dev.off();
source('C:/rProject/day06/r10.R', encoding = 'UTF-8')
g2(1)
g2(2)
