avPsub
avPpeo <- round(rowMeans(tmp[,c(-1,-2)]), 2)
avPpeo <- round(rowMeans(tmp), 2)
avPpeo
avPsub
name(avPpeo) <- df[,1]
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
avPpeo
df[,'add']
class(tmp)
tmp2 <- as.character(tmp)
class(tmp2)
tmp2
tmp2 <- as.character(tmp)
class(tmp2)
tmp2
tmp <- df[,'add']
tmp2 <- as.character(tmp)
class(tmp2)
tmp2
substr(tmp2, 1, 2)
df
dfmale <- df[,which(df$gender == 'm')]
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
dfmale
dfmale <- df[which(df$gender == 'm'),]
dfmale
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
dffemale
dfmale <- df[gender == 'm',]
dfmale
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
rowMeans(dffemale[, c(3:6)])
colMeans(dfmale[, c(3:6)])
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
colMeans(dfmale[, c(3:6)])
rowMeans(dffemale[, c(3:6)])
rowMeans(dffemale[, c(3:6)])
colMeans(dfmale[, c(3:6)])
colMeans(dfmale)
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
mavg
favg
favg<-colMeans(dffemale[, c(3:6)])
favg
qplot(y=mavg, x=names(mavg))
#전체 평균 중 여자인 학생만 나오게 하자
df[df$gender=='f' & mean(df[,c(3:6)]),]
ex_avg <- mean(df[,c(2,4)])
df
ex_avg <- mean(df[,c(3,6)])
ex_avg <- mean(df[,c(3,5)])
ex_avg <- mean(df[c(3,6),])
ex_avg <- means(df[,c(3,6)])
ex_avg <- colMeans(df[,c(3,6)])
ex_avg
ex_avg <- colMeans(df[c(df$ko, df$en),])
ex_avg <- colMeans(df[which(df[,c(3,6)]),])
ex_avg <- colMeans(df[df[,c(3,6)),])
ex_avg <- colMeans(df[c(df[,df$ko]),])
ex_avg <- df[c(1,2),]
ex_avg
ex_avg <- df[c(),]
ex_avg
ex_avg <- df[c(4),]
ex_avg
ex_avg <- rowMeans(df[,c(3, 6)])
ex_avg
names(ex_avg) <- df$name
ex_avg
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
ex2_avg <- colMeans(df[,c(3:6)])
# 여학생들의 과목 별 평균을 구하시오
#단 칼럼 명은 과목 평이 표시된다.
ex2_avg <- colMeans(df[,c(3:6)])
ex2_avg
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
# 여학생들의 과목 별 평균을 구하시오
#단 칼럼 명은 과목 평이 표시된다.
tmp <- df[df$gender=='f'];
ex2_avg <- colMeans(tmp[,c(3:6)])
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
ex2_avg
tmp
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
tmp3
# 여학생들의 과목 별 평균을 구하시오
#단 칼럼 명은 과목 평이 표시된다.
df[df$gender=='f',][,c(3,6)]
df[df$gender=='f',][,c(3,6)]
df <- data.frame(name, gender, ko, ma, si, en, add);
# 여학생들의 과목 별 평균을 구하시오
#단 칼럼 명은 과목 평이 표시된다.
df[df$gender=='f',][,c(3,6)]
# 여학생들의 과목 별 평균을 구하시오
#단 칼럼 명은 과목 평이 표시된다.
df[df$gender=='f',][,c(3:6)]
# 여학생들의 과목 별 평균을 구하시오
#단 칼럼 명은 과목 평이 표시된다.
colMeans(df[df$gender=='f',][,c(3:6)])
# 여학생들의 과목 별 평균을 구하시오
#단 칼럼 명은 과목 평이 표시된다.
avg <- colMeans(df[df$gender=='f',][,c(3:6)])
avg
# 여학생들의 과목 별 평균을 구하시오
#단 칼럼 명은 과목 평이 표시된다.
avg <- colMeans(df[df$gender=='f',][,c(3:6)])
avg
name(avg) <- colnames[df[,c(3:6)]]
source('C:/rProject/day02/r5.R', encoding = 'UTF-8')
# 여학생들의 과목 별 평균을 구하시오
#단 칼럼 명은 과목 평이 표시된다.
r1 <- colMeans(df[df$gender=='f',][,c(3:6)])
r1
r2 <- colMeans(result2[, c(3:6)])
result2 <- df[df$gender=='m',]
r2 <- colMeans(result2[, c(3:6)])
r2
r1
dfbind - cbind(r1,r2)
dfbind <- cbind(r1,r2)
dfbind
dfbind <- rbind(r1,r2)
dfbind
name <- rownames('m', 'f');
result4 <- as.data.frame(result3)
result3 <- rbind(r1,r2)
result4 <- as.data.frame(result3)
result4
result3
install.packages('readxl')
source('~/.active-rstudio-document', encoding = 'UTF-8')
is.data.frame(data)
source('~/.active-rstudio-document', encoding = 'UTF-8')
is.daSta.frame(data)
source('~/.active-rstudio-document', encoding = 'UTF-8')
is.daSta.frame(data);
is.data.frame(data);
source('~/.active-rstudio-document', encoding = 'UTF-8')
library(readxl) #dataframe형태로 만들어서 보내준다.
data <- read_excel('excel_exam.xlsx'); #같은 workspace가 아니면 c:부터 경로 다 써줘야함
is.data.frame(data);
exdata
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
is.data.frame(data);
data <- exdata();
data
is.data.frame(data);
exdata <- function(){
library(readxl) #dataframe형태로 만들어서 보내준다.
data <- read_excel('excel_exam.xlsx'); #같은 workspace가 아니면 c:부터 경로 다 써줘야함
#is.data.frame(data);
return (data);
}
data <- exdata();
source('~/.active-rstudio-document', encoding = 'UTF-8')
data
mean(data$math)
mean(data$math)
colnames(data)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
data <- exdata();
data
source('~/.active-rstudio-document', encoding = 'UTF-8')
data <- exdata();
data
#mean(data$math)
colnames(data) <- ㅊ('a','b','c','d', 'e')
#mean(data$math)
colnames(data) <- c('a','b','c','d', 'e')
data
data <- exdata();
data
library(readxl) #dataframe형태로 만들어서 보내준다.
read_excel
#is.data.frame(data);
return (data);
data <- exdata();
data
source('~/.active-rstudio-document', encoding = 'UTF-8')
data <- read.csv('csv_exam');
class(data);
data <- getcsv()
source('C:/rProject/day02/r7.R')
source('C:/rProject/day02/r7.R')
getcsv <- function(){
data <- read.csv('csv_exam');
#class(data);
return (data);
}
data <- getcsv()
data <- getcsv()
data
getcsv <- function(){
data <- read.csv('csv_exam2');
#class(data);
return (data);
}
data <- getcsv()
source('C:/rProject/day02/r7.R')
getcsv <- function(){
data <- read.csv('csv_exam2', header = F);
#class(data);
return (data);
}
data <- getcsv()
data <- getcsv()
data
getcsv <- function(){
data <- read.csv('csv_exam2.csv', header = F);
return (data);
}
data <- getcsv()
data <- read.csv('csv_exam2.csv', header = F);
return (data);
data <- getcsv()
data
source('C:/rProject/day02/r7.R')
data
source('C:/rProject/day02/r7.R')
source('C:/rProject/day02/r7.R')
data
source('C:/rProject/day02/r7.R')
source('C:/rProject/day02/r7.R')
data <- getcsv()
class(data)
class(data$V@)
class(data$V2)
source('C:/rProject/day02/r7.R')
class(data$V2)
#mean(data$math)
#colnames(data) <- c('a','b','c','d', 'e')
data$avg <- rowMeans(data[,c(4:6)])
data
#mean(data$math)
#colnames(data) <- c('a','b','c','d', 'e')
data$avg <- round(rowMeans(data[,c(4:6)]), 2)
data
write(data);
writedata(data);
source('C:/rProject/day02/r6.R', encoding = 'UTF-8')
writedata
writedata(data);
data <- exdata();
#mean(data$math)
#colnames(data) <- c('a','b','c','d', 'e')
data$avg <- round(rowMeans(data[,c(4:6)]), 2) # avg라는 열을 만들고 반올림해준것이다!
source('C:/rProject/day02/r7.R', encoding = 'UTF-8')
source('C:/rProject/day02/r7.R', encoding = 'UTF-8')
source('C:/rProject/day02/r7.R', encoding = 'UTF-8')
#data <- read.csv('csv_exam2.csv', header = F)
data <- read.csv('csv_exam3.csv', header = F, stringsAsFactors=F, encoding ='UTF-8') #문자열 섞이면 이걸 사용하자
data <- getcsv()#파일 불러오기
data$avg <- round(rowMeans(data[,c(4:6)]), 2) # avg라는 열을 만들고 반올림해준것이다!
writedata(data) #파일 저장 파일명으로 이미 저장되어있으면 다르게 해 줘야함!
writedata(data) #파일 저장 파일명으로 이미 저장되어있으면 다르게 해 줘야함!
writedata <- function(df){
write.csv(df, file='result0328_3.csv');
}
writedata(data) #파일 저장 파일명으로 이미 저장되어있으면 다르게 해 줘야함!
source('C:/rProject/day02/r7.R', encoding = 'UTF-8')
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
data <- getcsv()#파일 불러오기
data
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
data <- getcsv()#파일 불러오기
data
data <- getcsv()#파일 불러오기
data
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
data
data <- getcsv()#파일 불러오기
data
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
data <- getcsv()#파일 불러오기
data
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
getcsv <- function(){
data <- read.csv('resttime.csv', header = T, stringsAsFactors=F, encoding ='UTF-8') #문자열 섞이면 이걸 사용하자
class(data$V2)
return (data)
}
data <- getcsv()#파일 불러오기
data
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
data
data <- getcsv()#파일 불러오기
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
data <- getcsv()#파일 불러오기
data
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
data <- getcsv()#파일 불러오기
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
data <- getcsv()#파일 불러오기
data
data
tmp <- sum(data[,data$평일평일.전체])
tmp <- sum(data[,data$평일평일.전체])
#newdata <- read.csv('csv_exam3.csv', header = F, stringsAsFactors=F, encoding ='UTF-8')
#load('result0328')
data
tmp <- sum(data[,data$평일.전체])
tmp
tmp32
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
#newdata <- read.csv('csv_exam3.csv', header = F, stringsAsFactors=F, encoding ='UTF-8')
#load('result0328')
data
tmp32 <- sum(data[,data$평일.전체])
tmp32 <- sum(data[,c(5)])
tmp32
tmp32 <- sum(data[,c(5,6,7,8,9,10)])
tmp32
tmp32 <- rowSum(data[,c(5,6,7,8,9,10)])
tmp32 <- rowSums(data[,c(5,6,7,8,9,10)])
tmp32
tmp32 <- colSums(data[,c(5,6,7,8,9,10)])
tmp32
total <- colSums(data[,c(5,6,7,8,9,10)])
total <- colSums(which(data$구분.2 != 계)data[,c(5,6,7,8,9,10)])
total <- colSums(data[which(data$구분.2 != 계),c(5,6,7,8,9,10)])
temp <- data[which(data$구분구분.2=='계')]
temp
total <- colSums(data[which(data$구분.2 != '계'),c(5,6,7,8,9,10)])
total
temp <- data[which(data$구분구분.2=='계'),]
temp
temp <- data[,which(data$구분구분.2=='계')]
temp
temp <- c(data[,which(data$구분구분.2=='계')])
temp
wer <- c(data[,which(data$구분구분.2=='계')])
wer
wer <- data[,which(data$구분구분.2=='계')]
wer
wer <- data[which(data$구분구분.2=='계'),]
wer
wer <- data[which(data$구분.2=='계'),]
wer
total <- data[which(data$구분.2=='계'),]
total
#newdata <- read.csv('csv_exam3.csv', header = F, stringsAsFactors=F, encoding ='UTF-8')
#load('result0328')
data
()
#newdata <- read.csv('csv_exam3.csv', header = F, stringsAsFactors=F, encoding ='UTF-8')
#load('result0328')
data
#total <- colSums(data[which(data$구분.2 != '계'),c(5,6,7,8,9,10)])
activity <- data[which(data%r구분.1=="교제활동"),c(5:10)]
#total <- colSums(data[which(data$구분.2 != '계'),c(5,6,7,8,9,10)])
activity <- data[which(data$r구분.1=="교제활동"),c(5:10)]
activity
#total <- colSums(data[which(data$구분.2 != '계'),c(5,6,7,8,9,10)])
activity <- data[which(data$구분.1=="교제활동"),c(5:10)]
activity
#total <- colSums(data[which(data$구분.2 != '계'),c(5,6,7,8,9,10)])
activity <- data[which(data$구분.1=="교제활동" & data$구분.2 !=""),c(5:10)]
activity
#total <- colSums(data[which(data$구분.2 != '계'),c(5,6,7,8,9,10)])
activity <- data[which(data$구분.1=="교제활동" & data$구분.2 !=""),c(4:10)]
activity
#total <- colSums(data[which(data$구분.2 != '계'),c(5,6,7,8,9,10)])
activity <- data[which(data$구분.1=="교제활동" && data$구분.2 !=""),c(4:10)]
activity
#total <- colSums(data[which(data$구분.2 != '계'),c(5,6,7,8,9,10)])
activity <- data[which(data$구분.1=="교제활동" && data$구분.2 !=""),c(4:10)]
activity
#total <- colSums(data[which(data$구분.2 != '계'),c(5,6,7,8,9,10)])
activity <- data[which(data$구분.1=="교제활동"),c(4:10)]
activity
act <- data[which(data$구분.1!="계"), c(2:7)]
act
act
act <- activity[which(data$구분.1!="계"), c(2:7)]
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
act
activity
act
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
act <- activity[which(activity$구분.1!='계'), c(2:7)]
act
act <- activity[which(activity$구분.1 != '계'), c(2:7)]
act
act <- activity[which(activity$구분.1 == "계"), c(2:7)]
act
activity
act <- activity[which(activity$구분.2 != '계'), c(2:7)]
act
actSum <- colSums(act)
actSum
actSum <- prop.table(act)
actSum
actSum <- prop.table(act, 2)
act_matrix <- as.matrix(act);
act_matrix
actSum <- prop.table(act_matrix, 2)
actSum
actSum <- prop.table(act_matrix, 2)*100
actSum
actSum <- round(prop.table(act_matrix, 2)*100, 0)
actSum
actSum <- round(prop.table(act_matrix, 2)*100, 1)
actSum
name(actRatio) <- activity$구분.2
#전체 평균 중 여자인 학생만 나오게 하자
df[df$gender=='f' & mean(df[,c(3:6)]),]
name <- c('김지훈', '이유진', '박동현', '김민지')
gender <- c('m', 'f', 'm','f')
ko <- c(90,80,60,70)
ma <- c(50,60,100,20)
si <- c(87,54,79,89)
en <- c(54,67,87,88)
add <- c('서울시', '광주시', '대전시', '부산시')
df
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
names(actRatio) <- activity$구분.2
actRatio
#학생별로 국어 영어의 평균을 내시오
#칼럼명은 사람이름으로 !!
ex_avg <- rowMeans(df[,c(3, 6)])
ex_avg
names(ex_avg) <- df$name
ex_avg
names(actRatio, 2) <- activity$구분.2
colnames(actRatio) <- activity$구분.2
rownames(actRatio) <- activity$구분.2
class(actRatio)
rownames(actRatio) <- df[activity$구분.2,]
rownames(actRatio) <- c("1", "2", '3');
actRatio
total <- data[which(data$구분.2=='계'),]
#total <- colSums(data[which(data$구분.2 != '계'),c(5,6,7,8,9,10)])
activity <- data[which(data$구분.1=="교제활동"),c(4:10)]
act <- activity[which(activity$구분.2 != '계'), c(2:7)]
act_matrix <- as.matrix(act);
actRatio <- round(prop.table(act_matrix, 2)*100, 1)
actRatio
rownames(actRatio) <- c("1", "2", '3');
#newdata <- read.csv('csv_exam3.csv', header = F, stringsAsFactors=F, encoding ='UTF-8')
#load('result0328')
data
actRatio
activity
rownames(actRatio) <- c(df[,1])
#newdata <- read.csv('csv_exam3.csv', header = F, stringsAsFactors=F, encoding ='UTF-8')
#load('result0328')
data
total <- data[which(data$구분.2=='계'),]
#total <- colSums(data[which(data$구분.2 != '계'),c(5,6,7,8,9,10)])
activity <- data[which(data$구분.1=="교제활동"),c(4:10)]
act <- as.matrix(activity);
act <- activity[which(activity$구분.2 != '계'), c(2:7)]
actRatio <- round(prop.table(act, 2)*100, 1)
class(actRatio)
actRatio
class(actRatio)
act <- as.matrix(activity);
act <- activity[which(activity$구분.2 != '계'), c(2:7)]
actRatio <- round(prop.table(act, 2)*100, 1)
act
prop.table(act, 2)
actRatio <- round(prop.table(act, 2)*100, 1)
class(actRatio)
rownames(actRatio) <- c(df[,1])
actRatio <- round(prop.table(act, 2)*100, 1)
act <- as.matrix(activity[which(activity$구분.2 != '계'), c(2:7)])
act <- as.matrix(activity[which(activity$구분.2 != '계'), c(2:7)])
actRatio <- round(prop.table(act, 2)*100, 1)
class(actRatio)
rownames(actRatio) <- c(df[,1])
actRatio
rownames(actRatio) <- c('1', '2','3')
actRatio
#newdata <- read.csv('csv_exam3.csv', header = F, stringsAsFactors=F, encoding ='UTF-8')
#load('result0328')
data
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
activity
act <- as.matrix(activity[which(activity$구분.2 != '계'), c(2:7)])
act
rownames(actRatio) <- c('경', '2','3')
actRatio
rownames(actRatio) <- c(activity[,activity$구분.2])
source('C:/rProject/day02/exercise.R', encoding = 'UTF-8')
jpeg(filename = "mychart.jpg", width = 680, height = 680, quality = 100)
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000)
dev.off()
library(ggplot2)
jpeg(filename = "mychart.jpg", width = 680, height = 680, quality = 100)
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000)
dev.off()
jpeg(filename = "c:\\rProject\\mychart.jpg", width = 680, height = 680, quality = 100)
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000)
dev.off()
jpeg(filename = "c:\\rProject\\day02\\mychart.jpg", width = 680, height = 680, quality = 100)
ggplot(data=midwest, aes(x=poptotal, y=popasian))+geom_point() + xlim(0, 500000) + ylim(0, 10000)
dev.off()
